<?php

use Illuminate\Database\Seeder;
use Illuminate\Filesystem\Filesystem;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class CountriesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        // Drop the tables
        DB::table('geodata__continents')->delete();
        DB::table('geodata__subcontinents')->delete();
        DB::table('geodata__countries')->delete();

        $file = File::get('data/geodata/countries/countries.json');
        $json = json_decode($file);
        foreach ($json as $data)
        {
            $continent = Continent::firstOrCreate(
                [
                    'name' => $data->geo->region
                ],
                [
                    'code' => $data->geo->region_code,
                    'slug' => Str::slug($data->geo->region, '-'),
                    'region' => $data->geo->world_region,
                ]
            );
            
            $subcontinent = Subcontinent::firstOrCreate(
                [
                    'name' => $data->geo->subregion
                ],
                [
                    'code' => $data->geo->subregion_code, 
                    'slug' => Str::slug($data->geo->subregion, '-'),
                    'continent_id' => $continent->id,
                ]
            );

            Country::create([
                'continent_id'      => $continent->id,
                'subcontinent_id'   => $subcontinent->id,
                'name_eng_common'   => addslashes($data->name->common),
                'name_eng_formal'   => addslashes($data->name->official),
                'cca2'              => $data->cca2,
                'cca3'              => $data->cca3,
                'cioc'              => $data->cioc,
                'tlds'              => json_encode($data->tld, JSON_FORCE_OBJECT),
                'ccn3'              => $data->ccn3,
                'area'              => $data->area,
                'region'            => $data->region,
                'subregion'         => $data->subregion,
                'latlng'            => json_encode(array('lat' => $data->latlng[1], 'lng' => $data->latlng[0])),
                'landlocked'        => ($data->landlocked === true ? 'true' : 'false'),
                'neighbourhood'     => (empty($data->borders) ? 'null' : json_encode($data->borders, JSON_FORCE_OBJECT)),
                'status'            => $data->status,
                'independent'       => ($data->independent === true ? 'true' : 'false'),
                'un_member'         => ($data->unMember === true ? 'true' : 'false'),
                'flag'              => $data->flag,
                'currencies'        => json_encode($data->currencies, JSON_FORCE_OBJECT),
                'capital'           => json_encode($data->capital, JSON_FORCE_OBJECT),
                'demonyms'          => json_encode($data->demonyms, JSON_FORCE_OBJECT),
                'languages'         => json_encode($data->languages, JSON_FORCE_OBJECT),
                'name_native'       => json_encode($data->name->native, JSON_FORCE_OBJECT),
                'name_translations' => json_encode($data->translations, JSON_FORCE_OBJECT)
			]);
        }
    }

    /**
     * Returns existing seeder file if found.
     *
     * @return string
     */
    protected function getDataFiles(): string
    {
        $filesystem = $this->app->make(Filesystem::class);

        return Collection::make(__DIR__.'/../data' . DIRECTORY_SEPARATOR . 'countries' . DIRECTORY_SEPARATOR)
            ->flatMap(function ($path) use ($filesystem) {
                return $filesystem->glob($path . '*.json');
            })
            ->push(__DIR__.'/../data' . DIRECTORY_SEPARATOR . 'countries' . DIRECTORY_SEPARATOR . $dataFileName)
            ->first();
    }
}
